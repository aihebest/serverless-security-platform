# .github/workflows/security-scan.yml
name: Security Scanning Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily scan at midnight
  workflow_dispatch:  # Manual trigger

jobs:
  security_scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Dependency Scan
        env:
          COSMOS_DB_CONNECTION_STRING: ${{ secrets.COSMOS_DB_CONNECTION_STRING }}
          COSMOS_DB_DATABASE_NAME: ${{ secrets.COSMOS_DB_DATABASE_NAME }}
          COSMOS_DB_CONTAINER_NAME: ${{ secrets.COSMOS_DB_CONTAINER_NAME }}
        run: |
          python -c "
          import asyncio
          from src.scanners.scanning_service import ScanningService
          
          async def run_scan():
              scanner = ScanningService()
              dependencies = [
                  {'name': 'requests', 'version': '2.26.0'},
                  {'name': 'azure-cosmos', 'version': '4.3.0'}
              ]
              results = await scanner.scan_dependencies(dependencies)
              print('Dependency Scan Results:', results)
          
          asyncio.run(run_scan())
          "

      - name: Run Compliance Scan
        env:
          COSMOS_DB_CONNECTION_STRING: ${{ secrets.COSMOS_DB_CONNECTION_STRING }}
          COSMOS_DB_DATABASE_NAME: ${{ secrets.COSMOS_DB_DATABASE_NAME }}
          COSMOS_DB_CONTAINER_NAME: ${{ secrets.COSMOS_DB_CONTAINER_NAME }}
        run: |
          python -c "
          import asyncio
          from src.scanners.scanning_service import ScanningService
          
          async def run_scan():
              scanner = ScanningService()
              results = await scanner.scan_compliance()
              print('Compliance Scan Results:', results)
          
          asyncio.run(run_scan())
          "

      - name: Generate Scan Report
        run: |
          python -c "
          import json
          from datetime import datetime
          
          report = {
              'timestamp': datetime.utcnow().isoformat(),
              'repository': '${{ github.repository }}',
              'workflow_run': '${{ github.run_id }}',
              'status': 'completed'
          }
          
          with open('scan_report.json', 'w') as f:
              json.dump(report, f, indent=2)
          "

      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: scan_report.json

  notify:
    needs: security_scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Process Results
        run: |
          if [ "${{ needs.security_scan.result }}" == "success" ]; then
            echo "Security scan completed successfully"
          else
            echo "Security scan failed"
          fi