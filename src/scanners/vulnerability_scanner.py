# src/scanners/vulnerability_scanner.py
import logging
from typing import Dict, Any, List
from datetime import datetime
import aiohttp
from .base_scanner import BaseScanner

logger = logging.getLogger(__name__)

class VulnerabilityScanner(BaseScanner):
    def __init__(self):
        super().__init__(scan_type="vulnerability")
        self.osv_base_url = "https://api.osv.dev/v1/query"
        self.nvd_base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.nvd_api_key = os.getenv('NVD_API_KEY')

    async def scan(self, dependencies: List[Dict[str, str]] = None) -> Dict[str, Any]:
        """Scan for vulnerabilities in dependencies"""
        try:
            scan_id = f"vuln_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
            findings = []

            if dependencies:
                # Check dependencies against vulnerability databases
                osv_findings = await self._check_osv_database(dependencies)
                nvd_findings = await self._check_nvd_database(dependencies)
                findings.extend(osv_findings)
                findings.extend(nvd_findings)

            return {
                'scan_id': scan_id,
                'timestamp': datetime.utcnow().isoformat(),
                'status': 'completed',
                'findings': findings,
                'total_vulnerabilities': len(findings)
            }

        except Exception as e:
            error_msg = f"Vulnerability scan failed: {str(e)}"
            logger.error(error_msg)
            return {
                'scan_id': scan_id if 'scan_id' in locals() else 'error',
                'timestamp': datetime.utcnow().isoformat(),
                'status': 'failed',
                'error': error_msg
            }

    async def _check_osv_database(self, dependencies: List[Dict[str, str]]) -> List[Dict[str, Any]]:
        """Check dependencies against OSV database"""
        findings = []
        async with aiohttp.ClientSession() as session:
            for dep in dependencies:
                try:
                    payload = {
                        "package": {
                            "name": dep['name'],
                            "ecosystem": "PyPI"
                        },
                        "version": dep['version']
                    }
                    
                    async with session.post(self.osv_base_url, json=payload) as response:
                        if response.status == 200:
                            data = await response.json()
                            if vulns := data.get('vulns', []):
                                findings.extend([{
                                    'source': 'OSV',
                                    'package': dep['name'],
                                    'version': dep['version'],
                                    'vulnerability_id': vuln.get('id'),
                                    'severity': vuln.get('severity', 'UNKNOWN'),
                                    'description': vuln.get('details'),
                                    'references': vuln.get('references', [])
                                } for vuln in vulns])
                except Exception as e:
                    logger.error(f"Error checking OSV for {dep['name']}: {str(e)}")
        
        return findings

    async def _check_nvd_database(self, dependencies: List[Dict[str, str]]) -> List[Dict[str, Any]]:
        """Check dependencies against NVD database"""
        findings = []
        if not self.nvd_api_key:
            logger.warning("NVD API key not set, skipping NVD database check")
            return findings

        headers = {'apiKey': self.nvd_api_key}
        async with aiohttp.ClientSession() as session:
            for dep in dependencies:
                try:
                    params = {
                        'keywordSearch': f"{dep['name']} {dep['version']}",
                        'keywordExactMatch': True
                    }
                    
                    async with session.get(
                        self.nvd_base_url, 
                        headers=headers, 
                        params=params
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            if vulns := data.get('vulnerabilities', []):
                                findings.extend([{
                                    'source': 'NVD',
                                    'package': dep['name'],
                                    'version': dep['version'],
                                    'vulnerability_id': vuln['cve'].get('id'),
                                    'severity': self._get_cvss_severity(vuln),
                                    'description': vuln['cve'].get('descriptions', [{}])[0].get('value'),
                                    'references': [ref.get('url') for ref in vuln['cve'].get('references', [])]
                                } for vuln in vulns])
                except Exception as e:
                    logger.error(f"Error checking NVD for {dep['name']}: {str(e)}")
        
        return findings

    def _get_cvss_severity(self, vuln: Dict) -> str:
        """Get CVSS severity from vulnerability data"""
        try:
            metrics = vuln['cve'].get('metrics', {})
            for version in ['cvssMetricV31', 'cvssMetricV30', 'cvssMetricV2']:
                if version in metrics:
                    return metrics[version][0].get('baseSeverity', 'UNKNOWN')
            return 'UNKNOWN'
        except Exception:
            return 'UNKNOWN'